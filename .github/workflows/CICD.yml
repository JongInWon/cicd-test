name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Maven
        run: |
          chmod 777 ./mvnw
          ./mvnw clean package -Dtestskip
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Docker
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/live_server .
      - name: Push Docker
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/live_server:latest
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set target IP
        run: |
          set -x  # Enable debug mode
          STATUS=$(curl -o /dev/null -w "%{http_code}" "http://${{ secrets.LIVE_SERVER_IP }}/env")
          echo "HTTP Status: $STATUS"
          if [ $STATUS = 200 ]; then
            CURRENT_UPSTREAM=$(curl -s "http://${{ secrets.LIVE_SERVER_IP }}/env")
          else
            CURRENT_UPSTREAM=green
          fi
          echo "CURRENT_UPSTREAM=$CURRENT_UPSTREAM"
          echo "CURRENT_UPSTREAM=$CURRENT_UPSTREAM" >> $GITHUB_ENV
          if [ $CURRENT_UPSTREAM = blue ]; then
            echo "Setting TARGET_UPSTREAM to green"
            echo "CURRENT_PORT=8080" >> $GITHUB_ENV
            echo "STOPPED_PORT=8081" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          else
            echo "Setting TARGET_UPSTREAM to blue"
            echo "CURRENT_PORT=8081" >> $GITHUB_ENV
            echo "STOPPED_PORT=8080" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
          fi
          echo "Environment variables set:"
          echo "CURRENT_UPSTREAM=$CURRENT_UPSTREAM"
          echo "CURRENT_PORT=$CURRENT_PORT"
          echo "STOPPED_PORT=$STOPPED_PORT"
          echo "TARGET_UPSTREAM=$TARGET_UPSTREAM"

      - name: Check Docker service and container status
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -x  # Enable debug mode
            echo "Checking Docker service status"
            sudo systemctl status docker || sudo systemctl restart docker
            echo "Listing all Docker containers"
            sudo docker ps -a
            echo "Listing all Docker images"
            sudo docker images

      - name: Docker compose
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: | 
            set -x  # Enable debug mode
            echo "Pulling latest Docker image"
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/live_server:latest
            echo "Starting new container with docker-compose"
            sudo docker-compose -f docker-compose-${{env.TARGET_UPSTREAM}}.yml up -d

      - name: Check deploy server URL
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ secrets.LIVE_SERVER_IP }}:${{env.STOPPED_PORT}}/env
          max-attempts: 10
          retry-delay: 20s

      - name: Change nginx upstream
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            set -x  # Enable debug mode
            echo "Updating Nginx configuration"
            sudo docker exec -i nginxserver bash -c 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload' 

      - name: Stop and remove current server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          envs: CURRENT_UPSTREAM,TARGET_UPSTREAM
          script: |
            set -x  # Enable debug mode
            echo "Current environment: CURRENT_UPSTREAM=$CURRENT_UPSTREAM, TARGET_UPSTREAM=$TARGET_UPSTREAM"
            echo "Listing all Docker containers"
            sudo docker ps -a
            if [ -n "$CURRENT_UPSTREAM" ] && sudo docker ps -a | grep -q $CURRENT_UPSTREAM; then
              echo "Attempting to stop and remove $CURRENT_UPSTREAM container"
              sudo docker stop $CURRENT_UPSTREAM || echo "Failed to stop container"
              sudo docker rm $CURRENT_UPSTREAM || echo "Failed to remove container"
            else
              echo "Container '$CURRENT_UPSTREAM' not found or CURRENT_UPSTREAM is not set. Skipping stop and remove."
            fi
            echo "Script completed"
